legend("topleft", legend="µ", pch=16, col="black", cex=1)
title("Ellipse assoicée à une distance Mahalanobis")
sigma[1,2] <- 0.5*sigma.1*sigma.2
sigma[2,1] <- 0.5*sigma.1*sigma.2
xy <- expand.grid(x = seq(mu[1]-sqrt(sigma[1,1]),
mu[1]+sqrt(sigma[1,1]), by = 0.01),
y = seq(mu[2]-sqrt(sigma[2,2]),
mu[2]+sqrt(sigma[2,2]), by = 0.01))
dist.xy <- mahalanobis(xy, mu, sigma)
plot(xy, type = "n",asp=1)
points(xy[dist.xy<=1, ], pch = 20, col = "blue")
points(mu[1], mu[2], pch = 16, col = "black", cex = 1)
#arrows(x0 = mu[1], y0 = mu[2], x1 = mu[1]+sqrt(lambda.1)*u.1[1],
#       mu[2]+sqrt(lambda.1)*u.1[2], col = "red", length = 0.1)
#arrows(x0 = mu[1], y0 = mu[2], x1 = mu[1]+sqrt(lambda.2)*u.2[1], y1 =
#         mu[2]+sqrt(lambda.2)*u.2[2], col = "red", length = 0.1)
#text(mu[1] + sqrt(lambda.1) * u.1[1], mu[2] + sqrt(lambda.1) * u.1[2] - 0.5,  expression(mu[1]), pos = 4, xpd = TRUE)
#text(mu[1]+sqrt(lambda.2)*u.2[1], mu[2]+sqrt(lambda.2)*u.2[2] + offset, expression(mu[2]), pos=2)
legend("topleft", legend="µ", pch=16, col="black", cex=1)
title("Ellipse assoicée à une distance Mahalanobis")
sigma[1,1] = (2*sigma.2)^2
sigma[1,2] <- 0
sigma[2,1] <- 0
xy <- expand.grid(x = seq(mu[1]-sqrt(sigma[1,1]),
mu[1]+sqrt(sigma[1,1]), by = 0.01),
y = seq(mu[2]-sqrt(sigma[2,2]),
mu[2]+sqrt(sigma[2,2]), by = 0.01))
dist.xy <- mahalanobis(xy, mu, sigma)
plot(xy, type = "n",asp=1)
points(xy[dist.xy<=1, ], pch = 20, col = "blue")
points(mu[1], mu[2], pch = 16, col = "black", cex = 1)
#arrows(x0 = mu[1], y0 = mu[2], x1 = mu[1]+sqrt(lambda.1)*u.1[1],
#       mu[2]+sqrt(lambda.1)*u.1[2], col = "red", length = 0.1)
#arrows(x0 = mu[1], y0 = mu[2], x1 = mu[1]+sqrt(lambda.2)*u.2[1], y1 =
#         mu[2]+sqrt(lambda.2)*u.2[2], col = "red", length = 0.1)
#text(mu[1] + sqrt(lambda.1) * u.1[1], mu[2] + sqrt(lambda.1) * u.1[2] - 0.5,  expression(mu[1]), pos = 4, xpd = TRUE)
#text(mu[1]+sqrt(lambda.2)*u.2[1], mu[2]+sqrt(lambda.2)*u.2[2] + offset, expression(mu[2]), pos=2)
legend("topleft", legend="µ", pch=16, col="black", cex=1)
title("Ellipse assoicée à une distance Mahalanobis")
sigma[1,2] <- 0.5*2*sigma.2*sigma.2
sigma[2,1] <- 0.5*2*sigma.2*sigma.2
xy <- expand.grid(x = seq(mu[1]-sqrt(sigma[1,1]),
mu[1]+sqrt(sigma[1,1]), by = 0.01),
y = seq(mu[2]-sqrt(sigma[2,2]),
mu[2]+sqrt(sigma[2,2]), by = 0.01))
dist.xy <- mahalanobis(xy, mu, sigma)
plot(xy, type = "n",asp=1)
points(xy[dist.xy<=1, ], pch = 20, col = "blue")
points(mu[1], mu[2], pch = 16, col = "black", cex = 1)
#arrows(x0 = mu[1], y0 = mu[2], x1 = mu[1]+sqrt(lambda.1)*u.1[1],
#       mu[2]+sqrt(lambda.1)*u.1[2], col = "red", length = 0.1)
#arrows(x0 = mu[1], y0 = mu[2], x1 = mu[1]+sqrt(lambda.2)*u.2[1], y1 =
#         mu[2]+sqrt(lambda.2)*u.2[2], col = "red", length = 0.1)
#text(mu[1] + sqrt(lambda.1) * u.1[1], mu[2] + sqrt(lambda.1) * u.1[2] - 0.5,  expression(mu[1]), pos = 4, xpd = TRUE)
#text(mu[1]+sqrt(lambda.2)*u.2[1], mu[2]+sqrt(lambda.2)*u.2[2] + offset, expression(mu[2]), pos=2)
legend("topleft", legend="µ", pch=16, col="black", cex=1)
title("Ellipse assoicée à une distance Mahalanobis")
acp <- prcomp(data.nbiv, retx = TRUE, center = TRUE, scale. = FALSE)
acp$rotation
library(MASS) ## fonction mvrnorm
N <- 500 # taille de l’échantillon aléatoire
set.seed(1989922) # remplacer monmatricule par votre matricule
sigma <- lambda.1*u.1%*%t(u.1) + lambda.2*u.2%*%t(u.2)
print(sigma)
data.nbiv <- mvrnorm(N, mu = mu, Sigma = sigma ) # simulation aléatoire
colnames(data.nbiv) <- c("X1","X2")
acp <- prcomp(data.nbiv, retx = TRUE, center = TRUE, scale. = FALSE)
print(acp)
acp.center <- acp$center
acp.matrix <- acp$rotation
acp.dev <- acp$sdev
plot(data.nbiv, pch=1)
points(acp.center[1], acp.center[2], pch = 16, col = "red", cex = 1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[1]*acp.matrix[1,1], y1 = acp.center[2]+acp.dev[1]*acp.matrix[2,1], col = "red", length=0.1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[2]*acp.matrix[1,2], y1 = acp.center[2]+acp.dev[2]*acp.matrix[2,2], col = "green", length=0.1)
title(main = "Composants principaux de l'ACP sur le nuage de points")
legend("topleft", legend=c("composant 1", "composant 2"), col=c("red", "green"), lty = c(1, 1))
error.X1 <- 0
error.X2 <- 0
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x[, 1])
for(i in 1:N){
reconstruct.data[1, i] <- reconstruct.data[1, i] + acp.center[1]
reconstruct.data[2, i] <-  reconstruct.data[2, i] + acp.center[2]
error.X1 <- error.X1 + ((reconstruct.data[1,i]-data.nbiv[i,1])^2+(reconstruct.data[2,i]-data.nbiv[i,2])^2)
#print(error.X1)
}
reconstruct.data <- t(reconstruct.data)
plot(reconstruct.data, pch=1, xlab="X1", ylab="X2", main="Données Reconstruites")
#Erreur de reconstruction J pour les deux variables
error.X1 <- error.X1/N
### ELEMENT 3 ##############
data.nbiv.df <- as.data.frame(data.nbiv)
centered.data <- as.data.frame(scale(data.nbiv, center = TRUE, scale = FALSE))
centered.rotation <- as.data.frame(acp$x)
dummyTest <- acp$x
for(i in 1:N){
dummyTest[i, 1] <- dummyTest[i, 1]/(acp.dev[1])
dummyTest[i, 2] <- dummyTest[i, 2]/(acp.dev[2])
}
sphereData <- as.data.frame(dummyTest)
ggplot() +
geom_point(data = data.nbiv.df, aes(x = X1, y = X2, color="données originales")) +
geom_point(data = centered.data, aes(x = X1, y = X2, color="données centrées")) +
geom_point(data = centered.rotation, aes(x = PC1, y = PC2, color="rotation des données")) +
geom_point(data = sphereData, aes(x = PC1, y = PC2, color="changement d'échelle des données")) +
scale_color_manual(values = c("données originales" = "black", "données centrées" = "red", "rotation des données" = "blue", "changement d'échelle des données" = "green")) +
ggtitle("Sphérage des données") +
theme_minimal()
library(ggplot2)
### ELEMENT 2 ##############
library(MASS) ## fonction mvrnorm
N <- 500 # taille de l’échantillon aléatoire
set.seed(1989922) # remplacer monmatricule par votre matricule
sigma <- lambda.1*u.1%*%t(u.1) + lambda.2*u.2%*%t(u.2)
print(sigma)
data.nbiv <- mvrnorm(N, mu = mu, Sigma = sigma ) # simulation aléatoire
colnames(data.nbiv) <- c("X1","X2")
acp <- prcomp(data.nbiv, retx = TRUE, center = TRUE, scale. = FALSE)
print(acp)
acp.center <- acp$center
acp.matrix <- acp$rotation
acp.dev <- acp$sdev
plot(data.nbiv, pch=1)
points(acp.center[1], acp.center[2], pch = 16, col = "red", cex = 1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[1]*acp.matrix[1,1], y1 = acp.center[2]+acp.dev[1]*acp.matrix[2,1], col = "red", length=0.1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[2]*acp.matrix[1,2], y1 = acp.center[2]+acp.dev[2]*acp.matrix[2,2], col = "green", length=0.1)
title(main = "Composants principaux de l'ACP sur le nuage de points")
legend("topleft", legend=c("composant 1", "composant 2"), col=c("red", "green"), lty = c(1, 1))
error.X1 <- 0
error.X2 <- 0
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x[, 1])
for(i in 1:N){
reconstruct.data[1, i] <- reconstruct.data[1, i] + acp.center[1]
reconstruct.data[2, i] <-  reconstruct.data[2, i] + acp.center[2]
error.X1 <- error.X1 + ((reconstruct.data[1,i]-data.nbiv[i,1])^2+(reconstruct.data[2,i]-data.nbiv[i,2])^2)
#print(error.X1)
}
reconstruct.data <- t(reconstruct.data)
plot(reconstruct.data, pch=1, xlab="X1", ylab="X2", main="Données Reconstruites")
#Erreur de reconstruction J pour les deux variables
error.X1 <- error.X1/N
### ELEMENT 3 ##############
data.nbiv.df <- as.data.frame(data.nbiv)
centered.data <- as.data.frame(scale(data.nbiv, center = TRUE, scale = FALSE))
centered.rotation <- as.data.frame(acp$x)
dummyTest <- acp$x
for(i in 1:N){
dummyTest[i, 1] <- dummyTest[i, 1]/(acp.dev[1])
dummyTest[i, 2] <- dummyTest[i, 2]/(acp.dev[2])
}
sphereData <- as.data.frame(dummyTest)
ggplot() +
geom_point(data = data.nbiv.df, aes(x = X1, y = X2, color="données originales")) +
geom_point(data = centered.data, aes(x = X1, y = X2, color="données centrées")) +
geom_point(data = centered.rotation, aes(x = PC1, y = PC2, color="rotation des données")) +
geom_point(data = sphereData, aes(x = PC1, y = PC2, color="changement d'échelle des données")) +
scale_color_manual(values = c("données originales" = "black", "données centrées" = "red", "rotation des données" = "blue", "changement d'échelle des données" = "green")) +
ggtitle("Sphérage des données") +
theme_minimal()
lambda.1 <- 65.499
lambda.2 <- 2.501
u.1 <- matrix(c(-0.154, 0.988), nrow=2, ncol=1)
u.2 <- matrix(c(-0.988, -0.154), nrow=2, ncol=1)
sigma <- lambda.1 * u.1 %*% t(u.1) + lambda.2 u.2 %*% t(u.2)
error.X1 <- 0
error.X2 <- 0
error.test <- 0
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x[, 1])
for(i in 1:N){
reconstruct.data[1, i] <- reconstruct.data[1, i] + acp.center[1]
reconstruct.data[2, i] <-  reconstruct.data[2, i] + acp.center[2]
error.X1 <- error.X1 + ((reconstruct.data[1,i]-data.nbiv[i,1])^2+(reconstruct.data[2,i]-data.nbiv[i,2])^2)
error.test <- error.test + ((acp$x[i,1]-data.nbiv[i,1])^2+(reconstruct.data[i,2]-data.nbiv[i,2])^2)
#print(error.X1)
}
acp <- prcomp(data.nbiv, retx = TRUE, center = TRUE, scale. = FALSE)
print(acp)
acp.center <- acp$center
acp.matrix <- acp$rotation
acp.dev <- acp$sdev
plot(data.nbiv, pch=1)
points(acp.center[1], acp.center[2], pch = 16, col = "red", cex = 1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[1]*acp.matrix[1,1], y1 = acp.center[2]+acp.dev[1]*acp.matrix[2,1], col = "red", length=0.1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[2]*acp.matrix[1,2], y1 = acp.center[2]+acp.dev[2]*acp.matrix[2,2], col = "green", length=0.1)
title(main = "Composants principaux de l'ACP sur le nuage de points")
legend("topleft", legend=c("composant 1", "composant 2"), col=c("red", "green"), lty = c(1, 1))
error.X1 <- 0
error.X2 <- 0
error.test <- 0
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x[, 1])
for(i in 1:N){
reconstruct.data[1, i] <- reconstruct.data[1, i] + acp.center[1]
reconstruct.data[2, i] <-  reconstruct.data[2, i] + acp.center[2]
error.X1 <- error.X1 + ((reconstruct.data[1,i]-data.nbiv[i,1])^2+(reconstruct.data[2,i]-data.nbiv[i,2])^2)
#error.test <- error.test + ((acp$x[i,1]-data.nbiv[i,1])^2+(reconstruct.data[i,2]-data.nbiv[i,2])^2)
#print(error.X1)
}
acp <- prcomp(data.nbiv, retx = TRUE, center = TRUE, scale. = FALSE)
print(acp)
acp.center <- acp$center
acp.matrix <- acp$rotation
acp.dev <- acp$sdev
plot(data.nbiv, pch=1)
points(acp.center[1], acp.center[2], pch = 16, col = "red", cex = 1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[1]*acp.matrix[1,1], y1 = acp.center[2]+acp.dev[1]*acp.matrix[2,1], col = "red", length=0.1)
arrows(x0 = acp.center[1], y0 = acp.center[2], x1 = acp.center[1]+acp.dev[2]*acp.matrix[1,2], y1 = acp.center[2]+acp.dev[2]*acp.matrix[2,2], col = "green", length=0.1)
title(main = "Composants principaux de l'ACP sur le nuage de points")
legend("topleft", legend=c("composant 1", "composant 2"), col=c("red", "green"), lty = c(1, 1))
error.X1 <- 0
error.X2 <- 0
error.test <- 0
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x[, 1])
for(i in 1:N){
reconstruct.data[1, i] <- reconstruct.data[1, i] + acp.center[1]
reconstruct.data[2, i] <-  reconstruct.data[2, i] + acp.center[2]
error.X1 <- error.X1 + ((reconstruct.data[1,i]-data.nbiv[i,1])^2+(reconstruct.data[2,i]-data.nbiv[i,2])^2)
error.test <- error.test + ((acp$x[i,1]-data.nbiv[i,1])^2+(acp$x[i,2]-data.nbiv[i,2])^2)
#print(error.X1)
}
error.test
error.X1
error.test/N
error.X1/N
data.nbiv
t(reconstruct.data)
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x)
acp$x
reconstruct.data <- acp.matrix[, 1] %*% t(acp$x[, 1])
for(i in 1:N){
reconstruct.data[1, i] <- reconstruct.data[1, i] + acp.center[1]
reconstruct.data[2, i] <-  reconstruct.data[2, i] + acp.center[2]
error.X1 <- error.X1 + ((reconstruct.data[1,i]-data.nbiv[i,1])^2)
#print(error.X1)
}
errorX1/N
error.X1/N
reconstruct.data
The *Gini index* is defined by
# Function definitions are for when there's two classes only
p <- seq(0, 1, length.out = 100)
data.frame(
x = p,
"Gini index" = p * (1 - p) * 2,
"Entropy" = -(p * log(p) + (1 - p) * log(1 - p)),
"Classification error" = 1 - pmax(p, 1 - p),
check.names = FALSE
) |>
pivot_longer(!x) |>
ggplot(aes(x = x, y = value, color = name)) +
geom_line(na.rm = TRUE)
library(ggplot2)
# Function definitions are for when there's two classes only
p <- seq(0, 1, length.out = 100)
data.frame(
x = p,
"Gini index" = p * (1 - p) * 2,
"Entropy" = -(p * log(p) + (1 - p) * log(1 - p)),
"Classification error" = 1 - pmax(p, 1 - p),
check.names = FALSE
) |>
pivot_longer(!x) |>
ggplot(aes(x = x, y = value, color = name)) +
geom_line(na.rm = TRUE)
install.package(showtext)
package.install(showtext)
installed.packages(showtext)
install.packages(showtext)
install.packages("showtext")
install.packages("tidyverse")
install.packages("ggtree")
library(showtext)
showtext::showtext_auto()
library(ggplot2)
library(tidyverse)
library(ggtree)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
ggplot(aes(x = x, y = value, color = name)) +
geom_line(na.rm = TRUE)
library(showtext)
showtext::showtext_auto()
library(ggplot2)
library(tidyverse)
library(ggtree)
# Function definitions are for when there's two classes only
p <- seq(0, 1, length.out = 100)
data.frame(
x = p,
"Gini index" = p * (1 - p) * 2,
"Entropy" = -(p * log(p) + (1 - p) * log(1 - p)),
"Classification error" = 1 - pmax(p, 1 - p),
check.names = FALSE
) |>
pivot_longer(!x) |>
ggplot(aes(x = x, y = value, color = name)) +
geom_line(na.rm = TRUE)
tree <- ape::read.tree(text = "(((3:1.5,(10:1,0:1)A:1)B:1,15:2)C:1,5:2)D;")
tree$node.label <- c("X1 < 1", "X2 < 1", "X1 < 0", "X2 < 0")
ggtree(tree, ladderize = FALSE) + scale_x_reverse() + coord_flip() +
geom_tiplab(vjust = 2, hjust = 0.5) +
geom_text2(aes(label=label, subset=!isTip), hjust = -0.1, vjust = -1)
plot(NULL, xlab="X1", ylab="X2", xlim = c(-1, 2), ylim = c(0, 3), xaxs = "i", yaxs = "i")
abline(h = 1, col = "red", lty = 2)
lines(c(1, 1), c(0, 1), col = "blue", lty = 2)
lines(c(-1, 2), c(2, 2), col = "red", lty = 2)
lines(c(0, 0), c(1, 2), col = "blue", lty = 2)
text(
c(0, 1.5, -0.5, 1, 0.5),
c(0.5, 0.5, 1.5, 1.5, 2.5),
labels = c("-1.80", "0.63", "-1.06", "0.21", "2.49")
)
x <- c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
ifelse(mean(x > 0.5), "red", "green") # majority vote
ifelse(mean(x) > 0.5, "red", "green") # average probability
mean(x)
mean(x>0.5)
xlim <- c(-10, 10)
ylim <- c(-30, 30)
points <- expand.grid(
X1 = seq(xlim[1], xlim[2], length.out = 50),
X2 = seq(ylim[1], ylim[2], length.out = 50)
)
p <- ggplot(points, aes(x = X1, y = X2)) +
geom_abline(intercept = 1, slope = 3) +  # X2 = 1 + 3X1
theme_bw()
p + geom_point(aes(color = 1 + 3*X1 - X2 > 0), size = 0.1) +
scale_color_discrete(name = "1 + 3X1 − X2 > 0")
p + geom_abline(intercept = 1, slope = -1/2) +  # X2 = 1 - X1/2
geom_point(
aes(color = interaction(1 + 3*X1 - X2 > 0, -2 + X1 + 2*X2 > 0)),
size = 0.5
) +
scale_color_discrete(name = "(1 + 3X1 − X2 > 0).(−2 + X1 + 2X2 > 0)")
data <- data.frame(
X1 = c(3, 2, 4, 1, 2, 4, 4),
X2 = c(4, 2, 4, 4, 1, 3, 1),
Y  = c(rep("Red", 4), rep("Blue", 3))
)
p <- ggplot(data, aes(x = X1, y = X2, color = Y)) +
geom_point(size = 2) +
scale_colour_identity() +
coord_cartesian(xlim = c(0.5, 4.5), ylim = c(0.5, 4.5))
p
install.packages("e1071")
install.packages("kernlab")
library(kernlab)
library(e1071)
svmfit <- svm(Y~., data = data, kernel = "linear", cost = 10)
svmfit <- svm(as.factor(Y) ~ ., data = data, kernel = "linear", cost = 10, scale = FALSE)
plot(svmfit, data)
svmfit
svmfit$coef0
svmfit$coefs
fit <- svm(as.factor(Y) ~ ., data = data, kernel = "linear", cost = 10, scale = FALSE)
beta <- c(
-fit$rho,
drop(t(fit$coefs) %*% as.matrix(data[fit$index, 1:2]))
)
names(beta) <- c("B0", "B1", "B2")
beta
p <- p + geom_abline(intercept = -beta[1] / beta[3], slope = -beta[2] / beta[3], lty = 2)
p
# Extract beta_0, beta_1, beta_2
beta <- c(
-fit$rho,
drop(t(fit$coefs) %*% as.matrix(data[fit$index, 1:2]))
)
names(beta) <- c("B0", "B1", "B2")
p <- p + geom_abline(intercept = -beta[1] / beta[3], slope = -beta[2] / beta[3], lty = 2)
p
fit$coeffs
fit$coefs
t(fit$SV) %*% fit$coefs
-fit$rho
beta
p <- p + geom_ribbon(
aes(x = x, ymin = ymin, ymax = ymax),
data = data.frame(x = c(0, 5), ymin = c(-1, 4), ymax = c(0, 5)),
alpha = 0.1, fill = "blue",
inherit.aes = FALSE
)
p
p <- p + geom_point(data = data[fit$index, ], size = 4)
p
p + geom_abline(intercept = 1, slope = 0.5, lty = 2, col = "red")
p + geom_point(data = data.frame(X1 = 1, X2 = 3, Y  = "Blue"), shape = 15, size = 4)
setwd("C:/Users/K-1/Documents/MTH8304/Devoir_5")
install.packages("fpp3")
library(fpp3)
library(ggplot2)
load("dev5_tanomaly.RData") ## adapter le chemin
set.seed(1989922) # remplacer par votre matricule
ind.cell <- sample(ncol(tanomaly.train)-1, 1) ## selection de maille
## pour visualiser où se trouve la maille
ggplot(lonlat.coord[ind.cell,], aes(x = lon, y = lat)) + geom_point(size = 2)+
borders(xlim = c(-140, -50), ylim = c(40, 89))
tanomaly.series
library(fpp3)
library(ggplot2)
load("dev5_tanomaly.RData") ## adapter le chemin
set.seed(1989922) # remplacer par votre matricule
ind.cell <- sample(ncol(tanomaly.train)-1, 1) ## selection de maille
## pour visualiser où se trouve la maille
ggplot(lonlat.coord[ind.cell,], aes(x = lon, y = lat)) + geom_point(size = 2)+
borders(xlim = c(-140, -50), ylim = c(40, 89))
tanomaly.series <- tsibble(
Date = tanomaly.train[,1],
Observation = tanomaly.train[,ind.cell+1],
index = Date
)
tanomaly.series
tanomaly.series[300]
tanomaly.series[300,]
tanomaly.series[301,]
tanomaly.series[100,]
library(fpp3)
library(ggplot2)
load("dev5_tanomaly.RData") ## adapter le chemin
set.seed(1989922) # remplacer par votre matricule
ind.cell <- sample(ncol(tanomaly.train)-1, 1) ## selection de maille
## pour visualiser où se trouve la maille
ggplot(lonlat.coord[ind.cell,], aes(x = lon, y = lat)) + geom_point(size = 2)+
borders(xlim = c(-140, -50), ylim = c(40, 89))
tanomaly.series <- tsibble(
Date = tanomaly.train[,1],
Observation = tanomaly.train[,ind.cell+1],
index = Date
)
tanomaly.series.test <- tsibble(
Date = tanomaly.test[,1],
Observation = tanomaly.test[,ind.cell+1],
index = Date
)
tanomaly.series.test
## graphique temporel
autoplot(tanomaly.series, Observation, linewidth = 1.2)+
labs(y = "degres C", x = "mois") + theme(text = element_text(size=20))
## deux types de graphiques saisonniers
tanomaly.series |> gg_season(Observation, labels = "both", linewidth = 1.2) +
labs(y = "degres C",x = "mois")+ theme(text = element_text(size=20))
tanomaly.series |> gg_subseries(Observation) + theme(text = element_text(size=20))
## graphique de lag: tester plusieurs lags en changeant la valeur de l’argument "lags"
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 1) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 2) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 3) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 4) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 5) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 6) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 7) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 8) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 9) +
theme(text = element_text(size=20),legend.title=element_blank())
## graphique d’auto-corrélation
tanomaly.series |> ACF(Observation, lag_anomaly = 24) |> autoplot()
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 11) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> gg_lag(Observation, geom = "point", lags = 12) +
theme(text = element_text(size=20),legend.title=element_blank())
tanomaly.series |> ACF(Observation, lag_anomaly = 24) |> autoplot()
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 12) + season(window = "periodic"), robust = TRUE))
|> components() -> tanomaly.stl
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 12) + season(window = "periodic"), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 8) + season(window = "periodic"), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 2) + season(window = "periodic"), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 24) + season(window = "periodic"), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
tanomaly.series |> model(STL(Observation ~ trend(window = 24), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 24) + season(window = "periodic"), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
## Décomposition STL stockée dans l’objet tanomaly.stl
tanomaly.series |> model(STL(Observation ~ trend(window = 12) + season(window = "periodic"), robust = TRUE)) |> components() -> tanomaly.stl
## Graphique standard de la décomposition
autoplot(tanomaly.stl)
## Graphique de l’ACF de la composante résiduelle
tanomaly.stl |> ACF(remainder, lag_anomaly = 24) |> autoplot()
